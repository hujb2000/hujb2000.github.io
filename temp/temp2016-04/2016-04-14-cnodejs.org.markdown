---
---
layout: post
title:  "Cnodejs.org"
date:   2016-04-14 13:35:30
categories: allen.hu update
---


# 国内Nodejs 2015总结

[2015 node.js技术栈](https://cnodejs.org/topic/55651bf07d4c64752effb4b1)

* req取参数的3种方法
1. req.params
2. req.body
3. req.query
4. req.files

* 了解db相关操作，先以mongoose为主

* 了解Promise/A+规范，合理规避回调陷阱

* 使用tdd/bdd测试，最小化总是

node的调试比较难，往往不如定测试来得快。

* 三种调试方式

1. node debug helloword-debug.js

2. npm install -g node-inspector

    node-inspector &

    node --debug-brk app.js

3. [代码覆盖率测试](http://i5ting.github.io/node-debug-tutorial/)

修改Gulpfile.js

auto test
代码测试覆盖率
npm install --save-dev gulp
npm install --save-dev gulp-mocha
npm install --save-dev gulp-istanbul

## [Promise篇](https://cnodejs.org/topic/560dbc826a1ed28204a1e7de)

JS流程控制的5个演进过程

1. 回调函数Callbacks
2. 异步JavaScript
3. Promise/a+
4. 生成器Generators/ yield
5. Async/ await

链式调用

return step1().then(step2).then(step3).then(step4).catch(function(err){
  // do something when err
});

这句话了有一个reject，其实还对应一个resolve方法
reject 是拒绝，跳转到catch error
resolve 是解决，下一步，即跳转到下一个promise操作

* co

co(function* (){
  yield Something.save();
}).then(function() {
  // success
})
.catch(function(err) {
  //error handling
});
你可能会问：如何实现并行操作呢？答案可能比你想象的简单，如下

yield [a.save(), b.save()];

* async/await

async function save(Something) {
  try {
    await Something.save(); // 等待await后面的代码执行完，类似于yield
  } catch (err) {
    //error handling
  }
  console.log('success');
}

[Promise书籍](http://liubin.org/promises-book/#introduction))


* [Node.js 异常处理uncaughtException篇](https://cnodejs.org/topic/5576a30bc4e7fbea6e9a32ad)

* [Node.js的Buffer那些你可能不知道的用法](https://cnodejs.org/topic/56499568d28aa64101600fdc)


## ioredis

一个支持Cluster和Sentinel的Redis库

## quickpomelo

[quickpomelo](https://github.com/rain1017/quick-pomelo)

A Much Better Pomelo Game Server Framework (网易Pomelo框架深度优化版) http://quickpomelo.com

* HA
* ES6 Promise

* 单点登陆
1. 以Cookie作为凭证媒价，不安全，不能跨域
2. JSONP虽 解决跨域问题，但不安全
3. 通过页面重定向的方式
4. 独立用户系统，

* Session

Session 可以简单的认为是服务器端的 Cookie 。一般在客户端Cookie设置Session的 Id，然后其余数据存储在服务器端，服务器通过每次请求带过来的 Id 来查找对应的数据。Session 存储在服务器端，对服务器端压力要大于 Cookie，但是网络IO消耗比之 Cookie 要小（只有一个Id嘛）。Session 和 Cookie 用哪个，请根据实际情况自行考虑。

1. session 存储本地式：内存或本地文件
2. 集中式，redis, mongodb, memcached, Mysql


* API Docs
[API Docs](http://tool.oschina.net/apidocs)

* [前端总结](https://cnodejs.org/topic/56ef3edd532839c33a99d00e)

[前端工具](http://www.cnblogs.com/sb19871023/p/3894452.html)

[免费书籍](https://github.com/justjavac/free-programming-books-zh_CN)

[算法](https://github.com/LukeLin/data-structure-with-js)

[ONIUI](http://ued.qunar.com/oniui/index.html#!/widgets?widgetId=cookie)

## Chart

[HCHARTS](http://www.hcharts.cn/docs/index.php?doc=basic-formater)

ECharts 百度出品，图形支持较全170K,示例方便完整，有K线图
ECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的 Canvas 类库 ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。
ECharts 3 中更是加入了更多丰富的交互功能以及更多的可视化效果，并且对移动端做了深度的优化。


[ECHARTS](http://echarts.baidu.com/demo.html#gauge)

[开源的矢量图脚本框架](http://paperjs.org/examples/bouncing-balls/)

[代码质量](https://github.com/JacksonTian/fks)

[网易前端微专业]()
[Spring与EasyNode比较]()
[Sass,LESS,MCSS]()
[新浪数据抓取]()
[ECHARTS使用]()
[单元测试Mocha/Should/Chai/Expect]()
[自动化测试]()
[性能](https://developer.yahoo.com/performance/rules.html)
[部署流程]()
[代码组织]()
[安全,CSRF/XSS,CSP,Same origin policy,]()
[响应式网页设计]()
[移动Web, zeptojs,iScroll,PhoneGap,Meteor, React Native]()
[前沿技术社区与会议]()
[可视化WebGL,Three.JS, ]()

[前端学习资料](https://github.com/dypsilon/frontend-dev-bookmarks)

[后端技术]()
c/c++/java/PHP/Ruby/Pyhton
网页服务器:nginx, Apache, Lighhttpd
数据库：MySQL, MongoDB, Oracle,
数据缓存:redis, memcached

[持续部署]()
[持续集成]()
[IT自动化工具]()

## 语言
[R语言秘笈]()
[Go语言]()

## Reactor
[React中文](http://reactjs.cn/)

## Meteor

## JS算法
[JS算法](https://cnodejs.org/topic/56ef3edd532839c33a99d00e)

## [非常酷的简历](http://www.webhek.com/misc/interactive-resume/)
[2](http://www.haorooms.com/about#top)

## Spring Boot

http://start.spring.io/
